{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","className","s","dialog","active","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","isAuth","dialogsItems","values","newMessageBody","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","reset","Component","RedirectComponent","this","React"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,+FCYrMC,EATI,SAACC,GAEhB,OACI,yBAAKC,UAAS,UAAKC,IAAEC,OAAP,YAAiBD,IAAEE,SAC7B,kBAAC,IAAD,CAASC,GAAE,mBAAcL,EAAMM,KAAON,EAAMO,QCCzCC,EANC,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAEO,SAAUT,EAAMS,U,yCCkCpCC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAdL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACV,GACXH,KAAK,iBACLc,YAAY,sBAEvB,6BAAK,6CAOFC,EAhDC,SAACtB,GACb,IAAIuB,EAAQvB,EAAMwB,YAEdC,EAAkBF,EAAMG,QACvBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,QAErDwB,EAAmBP,EAAMQ,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASvB,QAASuB,EAAEvB,QAASoB,IAAKG,EAAE1B,QAQlD,OAAKN,EAAMiC,OAGP,yBAAKhC,UAAWC,IAAEwB,SACd,yBAAKzB,UAAWC,IAAEgC,cACbT,GAEL,yBAAKxB,UAAWC,IAAE6B,UACd,6BAAMD,GACN,kBAAClB,EAAD,CAAqBG,SAfb,SAACoB,GACbA,EAAOC,gBACPpC,EAAMqC,YAAYF,EAAOC,qBAIP,kBAAC,IAAD,CAAU/B,GAAI,Y,gDCpBxCiC,EAA6B,SAACf,GAAD,MAAY,CACzCU,OAAQV,EAAMgB,KAAKN,S,eCiBRO,sBACXC,aAhBoB,SAAClB,GACrB,MAAO,CACHC,YAAaD,EAAMC,gBAIA,SAACkB,GACxB,MAAO,CACHL,YAAa,SAACD,GACVM,EAASC,YAAmBP,IAC5BM,EAASE,YAAM,+BDTK,SAACC,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAK/C,MAAMiC,OAET,kBAACY,EAAcE,KAAK/C,OAFI,kBAAC,IAAD,CAAUK,GAAG,eAJT,GAEX2C,IAAMH,WAOtC,OAAOJ,YAAQH,EAARG,CAAoCK,KCKhCN,CAGblB","file":"static/js/4.cb0e40c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__N0ttK\",\"dialogsItems\":\"Dialogs_dialogsItems__39QVp\",\"dialog\":\"Dialogs_dialog__3cBXO\",\"messages\":\"Dialogs_messages__34Dg5\",\"message\":\"Dialogs_message__3CTeL\",\"active\":\"Dialogs_active__3pX5F\"};","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    return (\r\n        <div className={`${s.dialog} ${s.active}`}>\r\n            <NavLink to={`/dialogs/${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator} from \"../../Utils/Validators/validators\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messagesElements = state.messages\r\n        .map(m => <Message message={m.message} key={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        if (values.newMessageBody) {\r\n            props.sendMessage(values.newMessageBody);\r\n        }\r\n    };\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[maxLength50]}\r\n                       name=\"newMessageBody\"\r\n                       placeholder='Enter ur message'/>\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm);\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />;\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n};","import {sendMessageCreator} from \"../../Redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {reset} from 'redux-form';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n            dispatch(reset('dialogAddMessageForm'));\r\n        },\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}